{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "기존 코드 분석 및 설계 문서 작성",
        "description": "현재 구현된 재산세 계산 로직과 전세사기 감면 관련 코드를 분석하고, 개선된 로직 구현을 위한 설계 문서를 작성합니다.",
        "details": "1. `mainTaxCalculation.ts` 파일의 기존 로직 분석\n2. 현재 전세사기 감면 적용 방식 파악\n3. 1세대 1주택 특례세율 적용 로직 분석\n4. 세부담상한제 적용 로직 분석\n5. 개선된 2단계 비교 로직 설계 문서 작성\n   - 표준세율 + 전세사기 감면 vs 1세대 1주택 특례세율 비교 로직\n   - 세부담상한제 비교 로직\n6. 필요한 함수 및 인터페이스 정의\n7. 기존 코드와의 통합 방안 설계",
        "testStrategy": "설계 문서 검토 회의를 통해 요구사항 충족 여부 확인. 특히 2단계 비교 로직이 PRD에 명시된 대로 설계되었는지 검증.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "전세사기 감면 전용 계산 함수 구현",
        "description": "전세사기 감면을 위한 별도의 계산 함수를 구현하여 모듈화된 구조를 만듭니다.",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "1. `calculateFraudLeaseReduction` 함수 생성\n2. 함수 파라미터 정의 (PropertyData 인터페이스 활용)\n```typescript\ninterface CalculationResult {\n  taxAmount: number;\n  calculationMethod: string;\n  details: {\n    standardRateWithReduction?: number;\n    specialRateAmount?: number;\n    selectedAmount: number;\n    taxLimitAmount?: number;\n    finalAmount: number;\n  };\n}\n\nfunction calculateFraudLeaseReduction(\n  propertyData: PropertyData,\n  standardTaxAmount: number,\n  previousYearTax: number\n): CalculationResult {\n  // 구현 내용\n}\n```\n3. 2단계 비교 로직 구현:\n   - Step 1: 표준세율 + 전세사기 감면 vs 1세대 1주택 특례세율 비교\n   - Step 2: Step 1 결과와 세부담상한제 적용액 비교\n4. 상세한 계산 과정 표시 추가\n5. 메인 계산 함수에서 전세사기 감면 선택 시 새로운 함수 호출하도록 수정",
        "testStrategy": "단위 테스트를 통해 함수의 정확성 검증. PRD에 제시된 예시 시나리오 값을 입력하여 기대 출력과 일치하는지 확인. 다양한 입력값에 대한 테스트 케이스 작성. UI에서 테스트하여 정확성 검증.",
        "subtasks": [
          {
            "id": 1,
            "title": "calculateFraudLeaseReduction 함수 구현",
            "description": "전세사기 감면 전용 계산 함수 구현 (파일 813라인부터)",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "2단계 비교 로직 구현",
            "description": "Step 1: 표준세율 + 전세사기 감면 vs 1세대 1주택 특례세율 비교\nStep 2: Step 1 결과와 세부담상한제 적용액 비교",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "메인 계산 함수 연동",
            "description": "메인 계산 함수에서 전세사기 감면 선택 시 새로운 함수 호출하도록 수정 (세부담상한제 미적용 시 처리 완료)",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "세부담상한제 적용 시 전세사기 감면 로직 완성",
            "description": "세부담상한제 적용 시에도 전세사기 감면 로직이 올바르게 작동하도록 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "UI 테스트 및 정확성 검증",
            "description": "구현된 함수를 UI에서 테스트하여 계산 결과의 정확성 검증",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "세부담상한제 비교 로직 구현",
        "description": "전세사기 감면 계산 결과와 세부담상한제 적용액을 비교하는 로직을 구현합니다.",
        "status": "done",
        "dependencies": [
          2
        ],
        "priority": "high",
        "details": "세부담상한제 비교 로직이 `calculateFraudLeaseReduction` 함수에 구현되었습니다:\n\n1. 세부담상한제 계산 및 비교 로직:\n   - 전년도 실제 납부세액이 있는 경우: `taxBurdenCapAmount = previousYearActualPaidTax * (taxBurdenCapRate / 100)`\n   - Step 1 결과와 세부담상한액 비교: `Math.min(step1Result, taxBurdenCapAmount)`\n\n2. 엣지 케이스 처리:\n   - 전년도 납부세액이 없는 경우 세부담상한제 미적용 처리\n\n3. 계산 과정 상세 정보:\n   - Step 2 비교 결과에 대한 설명 포함\n   - 세부담상한제 적용 여부와 적용된 세액 표시\n\n4. 메인 계산 함수와의 통합:\n   - `calculateFraudLeaseReduction` 함수가 모든 세부담상한제 비교 로직 포함\n   - 메인 계산 함수에서는 이 함수의 결과를 그대로 사용",
        "testStrategy": "단위 테스트를 통해 구현된 세부담상한제 계산 및 비교 로직의 정확성 검증:\n\n1. 다양한 세부담상한율과 전년도 세액 조합에 대한 테스트 케이스 검증\n2. 엣지 케이스 테스트:\n   - 전년도 납부세액이 없는 경우\n   - 세부담상한제가 적용되지 않는 경우\n   - 세부담상한액이 Step 1 결과보다 큰 경우와 작은 경우\n3. `calculateFraudLeaseReduction` 함수의 통합 테스트\n4. 계산 과정 상세 정보가 올바르게 생성되는지 검증",
        "subtasks": [
          {
            "id": 1,
            "title": "세부담상한제 계산 및 비교 로직 검증",
            "description": "구현된 세부담상한제 계산 및 비교 로직이 정확하게 작동하는지 검증합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "엣지 케이스 테스트",
            "description": "전년도 납부세액이 없는 경우 등 엣지 케이스에서 로직이 올바르게 작동하는지 테스트합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "계산 과정 상세 정보 검증",
            "description": "세부담상한제 적용 과정이 상세 정보에 올바르게 표시되는지 확인합니다.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "메인 계산 로직 통합",
        "description": "구현된 전세사기 감면 계산 함수와 세부담상한제 비교 로직을 기존 mainTaxCalculation.ts에 통합합니다.",
        "details": "1. `mainTaxCalculation.ts` 파일 수정\n2. 기존 전세사기 감면 로직을 새로운 함수 호출로 대체\n```typescript\n// 기존 코드\nif (propertyData.jeonseFraudReduction) {\n  taxAmount = taxAmount * 0.5; // 단순 50% 감면\n}\n\n// 새로운 코드\nif (propertyData.jeonseFraudReduction && propertyData.isSingleHouse) {\n  const result = calculateJeonseFraudReduction(\n    propertyData,\n    taxAmount,\n    propertyData.previousYearTax\n  );\n  taxAmount = result.finalAmount;\n  calculationDetails = { ...calculationDetails, ...result.details };\n  calculationMethod = result.calculationMethod;\n} else if (propertyData.jeonseFraudReduction) {\n  // 1세대 1주택이 아닌 경우 단순 50% 감면 적용\n  taxAmount = taxAmount * 0.5;\n  calculationMethod = '전세사기 감면(50%) 적용';\n}\n```\n3. 다른 감면 유형(임대주택, 노후연금)과의 충돌 방지 로직 구현\n4. 계산 과정 정보 저장 로직 통합",
        "testStrategy": "통합 테스트를 통해 전체 계산 흐름 검증. 다양한 시나리오(전세사기 감면만 선택, 다른 감면과 함께 선택 등)에 대한 테스트 케이스 작성. 기존 기능이 정상 작동하는지 회귀 테스트 수행.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "계산 과정 표시 개선",
        "description": "각 단계별 비교 과정을 상세히 표시하고 어떤 방식이 선택되었는지 명확히 안내하는 UI 개선을 구현합니다.",
        "status": "done",
        "dependencies": [
          4
        ],
        "priority": "medium",
        "details": "계산 과정 표시 개선을 위한 상세 단계별 UI 구현:\n\n1. 적용 세율 섹션 추가\n   - 특례세율과 표준세율에 대한 상세 정보 표시\n\n2. 단계별 계산 과정 명확히 표시\n   - Step1: 과세표준을 적용한 계산 (특례세율 적용)\n   - Step2: 전세사기 감면을 50% 적용 (표준세율 + 감면)\n   - Step3: 비교 및 선택 (두 계산 방식 비교 결과)\n   - Step4: 세부담상한제 적용한 세액 확인 (세부담상한제 계산 과정)\n   - Step5: 세액 비교 및 선택 (최종 비교 과정)\n   - Step6: 최종 재산세 본세 (최종 결과)\n   - 기본 세액 정보 추가\n\n3. 계산 결과 표시 컴포넌트 수정\n```typescript\ninterface DetailedCalculation {\n  // 기본 세율 정보\n  standardRate: string;\n  specialRate: string;\n  \n  // 계산 과정 정보\n  step1SpecialRate: number;\n  step2StandardWithReduction: number;\n  step3Selected: number;\n  step3Method: string;\n  step4TaxLimit: number;\n  step5Selected: number;\n  step5Method: string;\n  step6FinalTax: number;\n  baseTaxAmount: number;\n  savingAmount: number;\n}\n\nfunction renderCalculationDetails(details: DetailedCalculation): JSX.Element {\n  return (\n    <div className=\"calculation-details\">\n      <h3>계산 과정</h3>\n      \n      <div className=\"tax-rates-section\">\n        <h4>적용 세율</h4>\n        <p>특례세율: {details.specialRate}</p>\n        <p>표준세율: {details.standardRate}</p>\n      </div>\n      \n      <div className=\"calculation-steps\">\n        <div className=\"step\">\n          <h4>Step1. 과세표준을 적용한 계산</h4>\n          <p>특례세율 적용: {formatCurrency(details.step1SpecialRate)}원</p>\n        </div>\n        \n        <div className=\"step\">\n          <h4>Step2. 전세사기 감면을 50% 적용</h4>\n          <p>표준세율 + 감면: {formatCurrency(details.step2StandardWithReduction)}원</p>\n        </div>\n        \n        <div className=\"step\">\n          <h4>Step3. 비교 및 선택</h4>\n          <p>특례세율 vs 표준세율+감면 → {formatCurrency(details.step3Selected)}원 선택 ({details.step3Method})</p>\n        </div>\n        \n        <div className=\"step\">\n          <h4>Step4. 세부담상한제 적용한 세액 확인</h4>\n          <p>세부담상한제: {formatCurrency(details.step4TaxLimit)}원</p>\n        </div>\n        \n        <div className=\"step\">\n          <h4>Step5. 세액 비교 및 선택</h4>\n          <p>Step3 결과 vs 세부담상한제 → {formatCurrency(details.step5Selected)}원 최종 선택 ({details.step5Method})</p>\n        </div>\n        \n        <div className=\"step\">\n          <h4>Step6. 최종 재산세 본세</h4>\n          <p>{formatCurrency(details.step6FinalTax)}원</p>\n          <p className=\"base-tax\">※ 기본 세액: {formatCurrency(details.baseTaxAmount)}원</p>\n          <p className=\"saving\">절약액: {formatCurrency(details.savingAmount)}원</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n4. 절약액 계산 및 표시 로직 구현\n5. 선택 이유 표시 로직 구현\n6. 기본 세액 정보 추가 및 표시",
        "testStrategy": "1. UI 테스트를 통해 계산 과정이 명확하게 표시되는지 검증\n2. 다양한 계산 결과에 대한 표시 테스트 (특례세율 유리한 경우, 표준세율+감면 유리한 경우, 세부담상한제 적용 경우)\n3. 사용자 피드백을 통한 가독성 및 이해도 평가\n4. 개발 서버에서 실제 테스트 진행\n5. 모든 단계가 사용자 예시와 정확히 일치하는지 확인:\n   - Step별 명확한 구분과 번호 표시\n   - 계산 공식과 결과값 상세 표시\n   - 비교 과정과 선택 이유 명확히 표시\n   - 세부담상한제 계산 과정 상세 표시\n   - 최종 선택 이유와 절약 효과 명시",
        "subtasks": [
          {
            "id": 1,
            "title": "적용 세율 섹션 UI 구현",
            "description": "특례세율과 표준세율에 대한 상세 정보를 표시하는 UI 섹션 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "단계별 계산 과정 컴포넌트 구현",
            "description": "Step1~Step6까지의 계산 과정을 명확히 표시하는 컴포넌트 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "DetailedCalculation 인터페이스 확장",
            "description": "새로운 계산 과정 표시에 필요한 필드를 추가하여 인터페이스 확장",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "renderCalculationDetails 함수 업데이트",
            "description": "개선된 UI 요구사항에 맞게 렌더링 함수 업데이트",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "기본 세액 정보 및 절약액 표시 로직 구현",
            "description": "기본 세액 정보 추가 및 절약액 계산 로직 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "UI 스타일링 및 가독성 개선",
            "description": "계산 과정 표시의 가독성을 높이기 위한 CSS 스타일링 작업",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "개발 서버 테스트 준비",
            "description": "개발 서버에서 실제 테스트를 위한 준비 작업",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "엣지 케이스 처리 및 예외 처리",
        "description": "다양한 엣지 케이스와 예외 상황에 대한 처리 로직을 구현합니다.",
        "details": "1. 전년도 재산세 정보가 없는 경우 처리\n```typescript\nif (!previousYearTax || previousYearTax <= 0) {\n  // 세부담상한제 미적용, 단순 비교만 수행\n  return {\n    taxAmount: Math.min(standardRateWithReduction, specialRateAmount),\n    calculationMethod: standardRateWithReduction <= specialRateAmount ? '표준세율 + 전세사기 감면' : '1세대 1주택 특례세율',\n    details: { ... }\n  };\n}\n```\n2. 1세대 1주택이 아닌 경우 처리\n3. 과세표준이 0 또는 음수인 경우 처리\n4. 세부담상한율이 설정되지 않은 경우 처리\n5. 계산 결과가 0 이하인 경우 처리\n6. 입력값 유효성 검사 로직 구현",
        "testStrategy": "다양한 엣지 케이스에 대한 단위 테스트 작성. 예외 상황 시뮬레이션을 통한 오류 처리 검증. 경계값 테스트(0, 음수, 매우 큰 값 등).",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "종합 테스트 및 디버깅",
        "description": "구현된 전체 로직에 대한 종합 테스트를 수행하고 발견된 문제점을 수정합니다.",
        "details": "1. PRD 예시 시나리오 기반 테스트 케이스 작성 및 실행\n2. 다양한 입력값 조합에 대한 테스트 케이스 작성 및 실행\n   - 다양한 주택공시가격 범위\n   - 다양한 과세표준 범위\n   - 다양한 전년도 세액 및 세부담상한율 조합\n   - 다른 감면 유형과의 조합\n3. 발견된 버그 수정\n4. 성능 최적화 (필요시)\n5. 코드 리팩토링 및 정리",
        "testStrategy": "통합 테스트 및 E2E 테스트를 통한 전체 기능 검증. 실제 사용자 시나리오를 시뮬레이션하여 사용성 테스트. 성능 테스트(대량의 계산 요청 처리 등).",
        "priority": "medium",
        "dependencies": [
          5,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "문서화 및 배포 준비",
        "description": "구현된 기능에 대한 문서화 작업을 수행하고 배포를 준비합니다.",
        "details": "1. 코드 주석 추가 및 정리\n2. README 업데이트\n   - 새로운 전세사기 감면 계산 로직 설명\n   - 계산 예시 추가\n   - 사용 방법 안내\n3. 변경 로그 작성\n4. API 문서 업데이트 (필요시)\n5. 배포 스크립트 준비\n6. 테스트 환경에서 최종 검증\n7. 배포 계획 수립",
        "testStrategy": "문서 리뷰를 통한 정확성 및 완전성 검증. 배포 전 체크리스트를 통한 준비 상태 확인. 테스트 환경에서의 최종 기능 검증.",
        "priority": "low",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "전세사기 감면 계산 과정 표시 형식 수정",
        "description": "calculateFraudLeaseReduction 함수의 계산 과정 표시 형식을 사용자 예시와 정확히 일치하도록 수정합니다.",
        "status": "done",
        "dependencies": [
          5
        ],
        "priority": "medium",
        "details": "1. calculateFraudLeaseReduction 함수의 출력 형식을 수정:\n   - Step 번호와 순서를 사용자 예시와 일치시킴\n   - Step1과 Step2의 순서 교정 (Step1=표준세율+감면, Step2=특례세율)\n   - 각 단계별 계산 과정 설명을 사용자 요구사항에 맞게 수정\n   - 표시 형식 간소화: step1, step2, step3, step4, step5로 소문자로 통일\n   - 불필요한 세율 정보 제거: 복잡한 세율 설명 대신 간단한 '전세사기 감면 계산' 헤더로 변경\n   - 기본 세액 표시: 사용자 예시에 맞춰 특례세율 기준으로 표시\n\n2. 계산 과정 표시 형식 수정:\n```typescript\nfunction calculateFraudLeaseReduction(propertyData, standardTaxAmount, previousYearTax) {\n  const taxBase = propertyData.taxBase;\n  const standardRate = getStandardRate(taxBase);\n  const specialRate = getSpecialRate(taxBase);\n  \n  // step1: 과세표준 × 표준세율 × 전세사기 감면율 계산\n  const standardRateAmount = taxBase * (standardRate / 100);\n  const standardRateWithReduction = standardRateAmount * 0.5;\n  \n  // step2: 과세표준 × 1세대 1주택자 특례세율 계산\n  const specialRateAmount = taxBase * (specialRate / 100);\n  \n  // step3: step1과 step2 중 적은 값 선택\n  const lowerTaxAmount = Math.min(standardRateWithReduction, specialRateAmount);\n  \n  // step4: 세부담상한제 적용\n  const taxLimitAmount = previousYearTax * (1 + propertyData.taxLimitRate / 100);\n  \n  // step5: step3과 step4 중 적은 값 선택\n  const finalAmount = Math.min(lowerTaxAmount, taxLimitAmount);\n  \n  return {\n    finalAmount,\n    details: {\n      step1: {\n        title: \"과세표준 × 표준세율 × 전세사기 감면율\",\n        calculation: `${taxBase.toLocaleString()}원 × ${standardRate}% × 50% = ${standardRateWithReduction.toLocaleString()}원`,\n        amount: standardRateWithReduction\n      },\n      step2: {\n        title: \"과세표준 × 1세대 1주택자 특례세율\",\n        calculation: `${taxBase.toLocaleString()}원 × ${specialRate}% = ${specialRateAmount.toLocaleString()}원`,\n        amount: specialRateAmount\n      },\n      step3: {\n        title: \"step1과 step2 중 적은 값 선택\",\n        calculation: `${standardRateWithReduction.toLocaleString()}원 vs ${specialRateAmount.toLocaleString()}원 = ${lowerTaxAmount.toLocaleString()}원`,\n        amount: lowerTaxAmount,\n        selected: standardRateWithReduction <= specialRateAmount ? \"표준세율+감면\" : \"특례세율\"\n      },\n      step4: {\n        title: \"세부담상한제 적용\",\n        calculation: `전년도 세액 ${previousYearTax.toLocaleString()}원 × (1 + ${propertyData.taxLimitRate}%) = ${taxLimitAmount.toLocaleString()}원`,\n        amount: taxLimitAmount\n      },\n      step5: {\n        title: \"step3과 step4 중 적은 값 선택\",\n        calculation: `${lowerTaxAmount.toLocaleString()}원 vs ${taxLimitAmount.toLocaleString()}원 = ${finalAmount.toLocaleString()}원`,\n        amount: finalAmount,\n        selected: lowerTaxAmount <= taxLimitAmount ? \"감면세액\" : \"세부담상한액\"\n      }\n    }\n  };\n}\n```\n\n3. 결과 표시 컴포넌트 수정:\n```typescript\nfunction renderCalculationDetails(details) {\n  return (\n    <div className=\"calculation-steps\">\n      <h3>전세사기 감면 계산</h3>\n      \n      <div className=\"step\">\n        <h4>step1: {details.step1.title}</h4>\n        <p>{details.step1.calculation}</p>\n      </div>\n      \n      <div className=\"step\">\n        <h4>step2: {details.step2.title}</h4>\n        <p>{details.step2.calculation}</p>\n      </div>\n      \n      <div className=\"step\">\n        <h4>step3: {details.step3.title}</h4>\n        <p>{details.step3.calculation}</p>\n        <p>선택: {details.step3.selected}</p>\n      </div>\n      \n      <div className=\"step\">\n        <h4>step4: {details.step4.title}</h4>\n        <p>{details.step4.calculation}</p>\n      </div>\n      \n      <div className=\"step\">\n        <h4>step5: {details.step5.title}</h4>\n        <p>{details.step5.calculation}</p>\n        <p>선택: {details.step5.selected}</p>\n      </div>\n    </div>\n  );\n}\n```\n\n4. 사용자 예시와 정확히 일치하는지 확인:\n   - step1: 과세표준 × 표준세율 × 전세사기 감면율 = 41,430원\n   - step2: 과세표준 × 1세대 1주택자 특례세율 = 45,250원  \n   - step3: step1과 step2 중 적은 값 선택 = 41,430원\n   - step4: 세부담상한제 적용 = 42,140원\n   - step5: step3과 step4 중 적은 값 선택 = 41,430원",
        "testStrategy": "1. 단위 테스트 작성:\n   - 수정된 calculateFraudLeaseReduction 함수가 올바른 계산 과정과 결과를 반환하는지 검증\n   - 다양한 입력값에 대해 예상된 출력 형식이 정확히 나오는지 확인\n   - 각 단계별 계산 결과가 정확한지 검증\n\n2. 통합 테스트:\n   - 실제 UI에서 계산 과정이 사용자 예시와 동일하게 표시되는지 확인\n   - 다양한 시나리오에서 각 단계별 표시가 올바르게 작동하는지 검증\n     - 표준세율+감면이 유리한 경우\n     - 특례세율이 유리한 경우\n     - 세부담상한제가 적용되는 경우\n\n3. 사용자 예시와의 일치성 검증:\n   - 사용자가 제공한 예시 데이터를 입력하여 정확히 동일한 결과가 나오는지 확인\n   - Step 번호와 순서가 예시와 일치하는지 확인 (소문자 step 형식 확인)\n   - 계산식과 결과값이 예시와 동일한 형식으로 표시되는지 확인\n   - '전세사기 감면 계산' 헤더가 올바르게 표시되는지 확인\n\n4. 시각적 검증:\n   - 개발 환경에서 실제 렌더링된 결과를 스크린샷으로 캡처\n   - 사용자 요구사항과 비교하여 형식이 일치하는지 확인\n   - 필요시 디자인 팀과 협업하여 시각적 표현 검증\n\n5. 회귀 테스트:\n   - 기존 기능이 정상적으로 작동하는지 확인\n   - 다른 계산 로직에 영향을 주지 않는지 검증\n\n6. 개발 서버 테스트:\n   - 개발 서버에서 실제 테스트를 진행하여 모든 변경사항이 예상대로 작동하는지 확인",
        "subtasks": [
          {
            "id": 1,
            "title": "Step 순서 및 형식 수정",
            "description": "사용자 예시에 맞춰 Step1=표준세율+감면, Step2=특례세율로 수정하고 step1, step2 등 소문자로 통일",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "계산 과정 표시 형식 간소화",
            "description": "불필요한 세율 정보를 제거하고 '전세사기 감면 계산' 헤더로 변경",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "기본 세액 표시 방식 수정",
            "description": "사용자 예시에 맞춰 특례세율 기준으로 표시",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "개발 서버 테스트",
            "description": "수정된 코드를 개발 서버에 배포하고 실제 환경에서 테스트",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "Fix Property Tax Calculation Display Format for Jeonse Fraud Reduction",
        "description": "Modify the property tax calculation display format to show the correct step-by-step process for jeonse fraud reduction calculations with proper formatting and Korean explanations.",
        "status": "done",
        "dependencies": [
          9
        ],
        "priority": "high",
        "details": "1. Update the property tax calculation display format to match the required step-by-step process with the exact format specified by the user:\n\n```typescript\nfunction formatTaxCalculationSteps(calculationData) {\n  const {\n    standardTaxAmount,\n    fraudReductionAmount,\n    specialRateAmount,\n    step1Result,\n    taxBurdenCapAmount,\n    finalTaxAmount,\n    previousYearTax,\n    taxBurdenCapRate,\n    taxableValue,\n    standardRate,\n    specialRate,\n    deduction,\n    fraudReductionRate\n  } = calculationData;\n  \n  return {\n    sections: [\n      {\n        title: \"적용 세율\",\n        content: `특례세율 ${specialRate}%, 표준세율 ${standardRate}%, 공제액 ${formatCurrency(deduction)}원`\n      },\n      {\n        title: \"Step1. 과세표준을 적용한 계산\",\n        steps: [\n          {\n            stepNumber: 1,\n            title: \"특례세율 계산\",\n            description: \"1세대 1주택 특례세율을 적용한 세액 계산\",\n            calculation: `${formatCurrency(taxableValue)} × ${specialRate}% - ${formatCurrency(deduction)} × 100% = ${formatCurrency(specialRateAmount)} → ${formatCurrency(specialRateAmount)}원`,\n            result: formatCurrency(specialRateAmount)\n          },\n          {\n            stepNumber: 2,\n            title: \"전세사기 감면 계산\",\n            description: `전세사기 피해자 감면 ${fraudReductionRate*100}% 적용`,\n            calculation: `(${formatCurrency(taxableValue)} × ${standardRate}% - ${formatCurrency(deduction)}) × 전세사기 감면율 × 100% = ${formatCurrency(fraudReductionAmount)}원`,\n            result: formatCurrency(fraudReductionAmount)\n          },\n          {\n            stepNumber: 3,\n            title: \"Step1과 Step2 비교\",\n            description: \"특례세율과 전세사기 감면 중 낮은 세액 선택\",\n            calculation: `${formatCurrency(specialRateAmount)}원 vs ${formatCurrency(fraudReductionAmount)}원`,\n            result: formatCurrency(step1Result),\n            selectedMethod: specialRateAmount <= fraudReductionAmount ? \"특례세율 적용\" : \"전세사기 감면 적용\"\n          },\n          {\n            stepNumber: 4,\n            title: \"세부담상한 계산\",\n            description: \"전년도 세액 기준 세부담상한액 계산\",\n            calculation: `전년도 세액 ${formatCurrency(previousYearTax)}원 × 세부담상한율 ${taxBurdenCapRate}% = ${formatCurrency(taxBurdenCapAmount)}원`,\n            result: formatCurrency(taxBurdenCapAmount)\n          },\n          {\n            stepNumber: 5,\n            title: \"Step3과 Step4 비교\",\n            description: \"Step3 결과와 세부담상한액 중 낮은 세액 선택\",\n            calculation: `${formatCurrency(step1Result)}원 vs ${formatCurrency(taxBurdenCapAmount)}원`,\n            result: formatCurrency(Math.min(step1Result, taxBurdenCapAmount)),\n            selectedMethod: step1Result <= taxBurdenCapAmount ? \"Step3 결과 적용\" : \"세부담상한액 적용\"\n          },\n          {\n            stepNumber: 6,\n            title: \"최종 재산세액\",\n            description: \"최종 납부할 재산세 금액\",\n            result: formatCurrency(finalTaxAmount)\n          }\n        ]\n      }\n    ]\n  };\n}\n```\n\n2. Ensure each step is clearly labeled with proper Korean explanations and integrated into the main \"재산세 본세 계산\" section:\n   - Step1: 특례세율 계산\n   - Step2: 전세사기 감면 계산\n   - Step3: Step1과 Step2 비교, 낮은 세액 선택\n   - Step4: 세부담상한 계산\n   - Step5: Step3과 Step4 비교, 낮은 세액 선택\n   - Step6: 최종 재산세액\n\n3. Update the UI component to display the formatted steps with proper section headers:\n```typescript\nfunction TaxCalculationSteps({ calculationData }) {\n  const formattedData = formatTaxCalculationSteps(calculationData);\n  \n  return (\n    <div className=\"tax-calculation-steps\">\n      <h3>재산세 계산 과정</h3>\n      {formattedData.sections.map((section, sectionIndex) => (\n        <div key={sectionIndex} className=\"calculation-section\">\n          <h4 className=\"section-header\">### {section.title}</h4>\n          {section.content && <p className=\"section-content\">{section.content}</p>}\n          \n          {section.steps && section.steps.map((step, stepIndex) => (\n            <div key={stepIndex} className=\"calculation-step\">\n              <div className=\"step-header\">\n                <span className=\"step-number\">#### Step{step.stepNumber}:</span>\n                <span className=\"step-title\">{step.title}</span>\n              </div>\n              <div className=\"step-content\">\n                {step.description && <p className=\"step-description\">{step.description}</p>}\n                {step.calculation && <p className=\"step-calculation\">{step.calculation}</p>}\n                <p className=\"step-result\">결과: {step.result}원</p>\n                {step.selectedMethod && <p className=\"selected-method\">선택: {step.selectedMethod}</p>}\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n4. Add proper CSS styling to ensure clear visual separation between sections and steps:\n```css\n.tax-calculation-steps {\n  margin: 20px 0;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  padding: 15px;\n}\n\n.calculation-section {\n  margin-bottom: 25px;\n}\n\n.section-header {\n  font-weight: bold;\n  color: #1a365d;\n  margin-bottom: 15px;\n  border-bottom: 2px solid #4299e1;\n  padding-bottom: 5px;\n}\n\n.section-content {\n  margin-bottom: 15px;\n  color: #2d3748;\n  font-weight: 500;\n}\n\n.calculation-step {\n  margin-bottom: 15px;\n  padding-bottom: 15px;\n  border-bottom: 1px dashed #e0e0e0;\n  padding-left: 15px;\n}\n\n.calculation-step:last-child {\n  border-bottom: none;\n  margin-bottom: 0;\n  padding-bottom: 0;\n}\n\n.step-header {\n  font-weight: bold;\n  margin-bottom: 8px;\n}\n\n.step-number {\n  color: #2c5282;\n  margin-right: 8px;\n}\n\n.step-content {\n  padding-left: 15px;\n  color: #4a5568;\n}\n\n.step-result {\n  font-weight: bold;\n  color: #2d3748;\n}\n\n.selected-method {\n  color: #38a169;\n  font-style: italic;\n}\n```\n\n5. Ensure the calculation data is properly passed from the main calculation function with all required fields:\n```typescript\nfunction calculatePropertyTax(propertyData) {\n  // Existing calculation logic...\n  \n  // Prepare data for step display\n  const calculationData = {\n    taxableValue: taxableValue,\n    standardRate: standardRate,\n    specialRate: specialRate,\n    deduction: deduction,\n    standardTaxAmount: standardTaxAmount,\n    fraudReductionAmount: standardTaxAmount * fraudReductionRate, // e.g., 50% reduction\n    fraudReductionRate: fraudReductionRate,\n    specialRateAmount: specialRateAmount,\n    step1Result: Math.min(standardTaxAmount * fraudReductionRate, specialRateAmount),\n    taxBurdenCapAmount: previousYearTax * (taxBurdenCapRate / 100),\n    finalTaxAmount: finalTaxAmount,\n    previousYearTax: previousYearTax,\n    taxBurdenCapRate: taxBurdenCapRate\n  };\n  \n  return {\n    taxAmount: finalTaxAmount,\n    calculationSteps: formatTaxCalculationSteps(calculationData)\n  };\n}\n```\n\n6. Update the integration with the main calculation display to ensure the jeonse fraud reduction is properly shown as part of the main calculation process rather than as a separate section.",
        "testStrategy": "1. Create unit tests for the formatting function:\n   ```typescript\n   describe('formatTaxCalculationSteps', () => {\n     it('should format calculation steps correctly with proper sections', () => {\n       const mockCalculationData = {\n         taxableValue: 75250000,\n         standardRate: 0.15,\n         specialRate: 0.1,\n         deduction: 30000,\n         standardTaxAmount: 82875,\n         fraudReductionAmount: 41430,\n         fraudReductionRate: 0.5,\n         specialRateAmount: 45250,\n         step1Result: 41430,\n         taxBurdenCapAmount: 42140,\n         finalTaxAmount: 41430,\n         previousYearTax: 60200,\n         taxBurdenCapRate: 70\n       };\n       \n       const result = formatTaxCalculationSteps(mockCalculationData);\n       \n       expect(result.sections).toHaveLength(2);\n       expect(result.sections[0].title).toBe(\"적용 세율\");\n       expect(result.sections[1].title).toBe(\"Step1. 과세표준을 적용한 계산\");\n       expect(result.sections[1].steps).toHaveLength(6);\n       expect(result.sections[1].steps[0].stepNumber).toBe(1);\n       expect(result.sections[1].steps[0].title).toBe(\"특례세율 계산\");\n       // Check all other steps and their properties\n     });\n     \n     it('should select the correct method when special rate is lower', () => {\n       const mockData = {\n         taxableValue: 75250000,\n         standardRate: 0.15,\n         specialRate: 0.1,\n         deduction: 30000,\n         standardTaxAmount: 82875,\n         fraudReductionAmount: 41430,\n         fraudReductionRate: 0.5,\n         specialRateAmount: 40000, // Lower than fraud reduction\n         step1Result: 40000,\n         // other properties...\n       };\n       \n       const result = formatTaxCalculationSteps(mockData);\n       expect(result.sections[1].steps[2].selectedMethod).toBe(\"특례세율 적용\");\n     });\n     \n     it('should select the correct method when fraud reduction is lower', () => {\n       const mockData = {\n         taxableValue: 75250000,\n         standardRate: 0.15,\n         specialRate: 0.1,\n         deduction: 30000,\n         standardTaxAmount: 82875,\n         fraudReductionAmount: 41430,\n         fraudReductionRate: 0.5,\n         specialRateAmount: 45250, // Higher than fraud reduction\n         step1Result: 41430,\n         // other properties...\n       };\n       \n       const result = formatTaxCalculationSteps(mockData);\n       expect(result.sections[1].steps[2].selectedMethod).toBe(\"전세사기 감면 적용\");\n     });\n\n     it('should format calculation steps with the exact format required by the user', () => {\n       const mockData = {\n         taxableValue: 75250000,\n         standardRate: 0.15,\n         specialRate: 0.1,\n         deduction: 30000,\n         standardTaxAmount: 82875,\n         fraudReductionAmount: 41430,\n         fraudReductionRate: 0.5,\n         specialRateAmount: 45250,\n         step1Result: 41430,\n         taxBurdenCapAmount: 42140,\n         finalTaxAmount: 41430,\n         previousYearTax: 60200,\n         taxBurdenCapRate: 70\n       };\n       \n       const result = formatTaxCalculationSteps(mockData);\n       \n       // Check for exact format matching\n       expect(result.sections[0].title).toBe(\"적용 세율\");\n       expect(result.sections[1].title).toBe(\"Step1. 과세표준을 적용한 계산\");\n       \n       // Check Step1 calculation format\n       expect(result.sections[1].steps[0].calculation).toContain(\"75,250,000 × 0.1% - 30,000 × 100% = 45,250\");\n       \n       // Check Step2 calculation format\n       expect(result.sections[1].steps[1].calculation).toContain(\"(75,250,000 × 0.15% - 30,000) × 전세사기 감면율 × 100% = 41,430원\");\n     });\n   });\n   ```\n\n2. Create integration tests to verify the UI component renders correctly with the new section structure:\n   ```typescript\n   describe('TaxCalculationSteps component', () => {\n     it('should render all sections and steps correctly', () => {\n       const mockCalculationData = {\n         // Test data matching the example format\n         taxableValue: 75250000,\n         standardRate: 0.15,\n         specialRate: 0.1,\n         deduction: 30000,\n         standardTaxAmount: 82875,\n         fraudReductionAmount: 41430,\n         fraudReductionRate: 0.5,\n         specialRateAmount: 45250,\n         step1Result: 41430,\n         taxBurdenCapAmount: 42140,\n         finalTaxAmount: 41430,\n         previousYearTax: 60200,\n         taxBurdenCapRate: 70\n       };\n       \n       const { getByText, getAllByText } = render(<TaxCalculationSteps calculationData={mockCalculationData} />);\n       \n       // Check section headers\n       expect(getByText('### 적용 세율')).toBeInTheDocument();\n       expect(getByText('### Step1. 과세표준을 적용한 계산')).toBeInTheDocument();\n       \n       // Check step headers\n       expect(getByText('#### Step1:')).toBeInTheDocument();\n       expect(getByText('특례세율 계산')).toBeInTheDocument();\n       expect(getByText('#### Step2:')).toBeInTheDocument();\n       expect(getByText('전세사기 감면 계산')).toBeInTheDocument();\n       \n       // Check calculations are rendered with proper format\n       expect(getByText(/75,250,000 × 0.1% - 30,000 × 100% = 45,250/)).toBeInTheDocument();\n     });\n   });\n   ```\n\n3. Perform manual testing with various scenarios to ensure the display matches the required format:\n   - Test with a case where standard tax with reduction is lower than special rate\n   - Test with a case where special rate is lower than standard tax with reduction\n   - Test with a case where tax burden cap amount is lower than both\n   - Test with a case where tax burden cap doesn't apply (no previous year tax)\n   - Verify that the exact calculation format matches the user's requirements\n\n4. Verify Korean text rendering and section structure:\n   - Check that all Korean text displays correctly without encoding issues\n   - Verify that explanations are clear and match the requirements\n   - Ensure section headers are properly formatted with \"###\" prefix\n   - Ensure step headers are properly formatted with \"####\" prefix\n\n5. Perform visual inspection:\n   - Verify that sections and steps are clearly separated and numbered\n   - Check that calculations are properly formatted with the exact format required\n   - Ensure selected methods are highlighted appropriately\n   - Verify that the jeonse fraud reduction is properly integrated into the main calculation flow\n\n6. Create end-to-end tests:\n   - Test the complete flow from property data input to calculation display\n   - Verify that changing input values updates the calculation steps correctly\n   - Ensure the display format remains consistent across different calculation scenarios",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Fix Property Tax Calculation Display Format Issues",
        "description": "Correct the property tax calculation display format to match the user's required format, fixing step numbering, value confusion, and formatting issues in the jeonse fraud reduction calculation display.",
        "status": "pending",
        "dependencies": [
          10
        ],
        "priority": "high",
        "details": "1. Fix Step1 vs Step2 value confusion:\n   - Update the display logic to show 45,250원 (special rate) in Step1\n   - Update Step2 to show 41,430원 (fraud reduction)\n   - Ensure the correct values are associated with each step\n\n2. Correct the calculation formula display in Step2:\n   - Implement the exact format \"41.437.5 → 41,430원\" for the fraud reduction calculation\n   - Ensure decimal points and thousands separators are correctly formatted\n   - Round values appropriately according to business rules\n\n3. Fix Step3 comparison text:\n   - Update the comparison text to exactly match: \"Step1의 45,250원 VS Step2의 41,430원 중 적은 값: 41,430원\"\n   - Ensure the correct values are pulled from previous steps\n   - Maintain consistent formatting with Korean text\n\n4. Implement proper Korean formatting for step headers:\n   - Update all step headers to use the format \"#### Step1:\", \"#### Step2:\", etc.\n   - Ensure consistent capitalization and spacing\n   - Apply these formatting changes across all steps\n\n5. Fix the tax burden ceiling calculation display format:\n   - Update the display to match the user's \"올바른 표기 모습\" format\n   - Ensure correct calculation and presentation of the ceiling amount\n   - Format numbers with appropriate separators and currency symbols\n\n6. Update the formatting function to implement all these changes:\n```typescript\nfunction formatPropertyTaxCalculation(calculationData) {\n  const {\n    specialRateAmount,\n    fraudReductionAmount,\n    finalTaxAmount,\n    // other required values...\n  } = calculationData;\n  \n  // Format numbers with proper Korean currency format\n  const formatCurrency = (amount) => {\n    return Math.round(amount).toLocaleString('ko-KR') + '원';\n  };\n  \n  let formattedOutput = '';\n  \n  // Step1: Special Rate\n  formattedOutput += '#### Step1: 1세대 1주택 특례세율 적용\\n';\n  formattedOutput += `계산 결과: ${formatCurrency(specialRateAmount)}\\n\\n`;\n  \n  // Step2: Fraud Reduction\n  formattedOutput += '#### Step2: 전세사기 감면 적용\\n';\n  formattedOutput += `계산 과정: ${fraudReductionAmount.toFixed(1)} → ${formatCurrency(Math.round(fraudReductionAmount))}\\n\\n`;\n  \n  // Step3: Comparison\n  formattedOutput += '#### Step3: 세액 비교\\n';\n  formattedOutput += `Step1의 ${formatCurrency(specialRateAmount)} VS Step2의 ${formatCurrency(Math.round(fraudReductionAmount))} 중 적은 값: ${formatCurrency(Math.min(specialRateAmount, Math.round(fraudReductionAmount)))}\\n\\n`;\n  \n  // Additional steps for tax burden ceiling, etc.\n  // ...\n  \n  return formattedOutput;\n}\n```\n\n7. Ensure all numeric values are properly formatted with thousands separators and Korean currency symbol (원)\n\n8. Verify that the output exactly matches the user's \"올바른 표기 모습\" format in all test cases",
        "testStrategy": "1. Create unit tests for the updated formatting function:\n   ```typescript\n   describe('formatPropertyTaxCalculation', () => {\n     it('should correctly format Step1 with special rate value', () => {\n       const mockData = {\n         specialRateAmount: 45250,\n         fraudReductionAmount: 41437.5,\n         // other test data...\n       };\n       const result = formatPropertyTaxCalculation(mockData);\n       expect(result).toContain('#### Step1:');\n       expect(result).toContain('45,250원');\n     });\n     \n     it('should correctly format Step2 with fraud reduction value', () => {\n       const mockData = {\n         specialRateAmount: 45250,\n         fraudReductionAmount: 41437.5,\n         // other test data...\n       };\n       const result = formatPropertyTaxCalculation(mockData);\n       expect(result).toContain('#### Step2:');\n       expect(result).toContain('41.437.5 → 41,430원');\n     });\n     \n     it('should correctly format Step3 comparison text', () => {\n       const mockData = {\n         specialRateAmount: 45250,\n         fraudReductionAmount: 41437.5,\n         // other test data...\n       };\n       const result = formatPropertyTaxCalculation(mockData);\n       expect(result).toContain('Step1의 45,250원 VS Step2의 41,430원 중 적은 값: 41,430원');\n     });\n     \n     // Additional tests for other formatting requirements\n   });\n   ```\n\n2. Perform visual verification:\n   - Create a test page that displays the calculation results\n   - Compare the output with the user's \"올바른 표기 모습\" format\n   - Verify all formatting, spacing, and text matches exactly\n\n3. Test with various input values:\n   - Test with different property values to ensure formatting is consistent\n   - Test with edge cases (very large numbers, zero values, etc.)\n   - Verify rounding behavior is correct in all cases\n\n4. Integration testing:\n   - Verify the formatted output displays correctly in the actual UI\n   - Test the integration with the calculation logic\n   - Ensure the correct values are being passed to the formatting function\n\n5. Regression testing:\n   - Verify that other parts of the application are not affected by these changes\n   - Ensure the calculation logic itself remains correct despite display changes",
        "subtasks": [
          {
            "id": 1,
            "title": "Update formatCurrency function for consistent Korean currency formatting",
            "description": "Implement a robust formatCurrency utility function that handles all Korean currency formatting requirements including thousands separators, rounding rules, and the '원' symbol.",
            "status": "pending",
            "dependencies": [],
            "details": "Create or modify the formatCurrency function to: 1) Round numbers according to business rules, 2) Add thousands separators using toLocaleString('ko-KR'), 3) Append the '원' symbol, 4) Handle decimal formatting for display of calculation steps. This function will be used throughout the tax calculation display.",
            "testStrategy": "Test with various numeric inputs including decimals, large numbers, and edge cases to ensure consistent formatting across all displays."
          },
          {
            "id": 2,
            "title": "Fix Step1 and Step2 value display and formatting",
            "description": "Correct the display logic to show the special rate (45,250원) in Step1 and the fraud reduction amount (41,430원) in Step2 with proper formatting.",
            "status": "completed",
            "dependencies": [
              1
            ],
            "details": "Update the formatPropertyTaxCalculation function to: 1) Display 45,250원 as the special rate in Step1, 2) Implement the exact format '41,437.5 → 41,430원' for the fraud reduction calculation in Step2, 3) Ensure decimal points and thousands separators are correctly formatted using the formatCurrency function.",
            "testStrategy": "Verify that Step1 shows exactly 45,250원 and Step2 shows the calculation process with proper formatting of '41,437.5 → 41,430원'."
          },
          {
            "id": 3,
            "title": "Implement consistent step header formatting",
            "description": "Standardize all step headers to use the format '#### Step1:', '#### Step2:', etc. with consistent capitalization and spacing.",
            "status": "pending",
            "dependencies": [],
            "details": "Update the formatPropertyTaxCalculation function to use consistent header formatting for all steps. Ensure each step header follows the exact format '#### StepN:' where N is the step number. Apply this formatting consistently across all steps in the calculation display.",
            "testStrategy": "Check that all step headers in the output follow the specified format with correct numbering and consistent styling."
          },
          {
            "id": 4,
            "title": "Fix Step3 comparison text formatting",
            "description": "Update the comparison text in Step3 to exactly match the required format with correct values from previous steps.",
            "status": "completed",
            "dependencies": [
              1,
              2
            ],
            "details": "Modify the Step3 section to display the comparison text in the exact format: 'Step1의 45,250원 VS Step2의 41,430원 중 적은 값: 41,430원'. Ensure the correct values are pulled from previous steps and maintain consistent formatting with Korean text. Use the formatCurrency function for all monetary values.",
            "testStrategy": "Verify that the comparison text exactly matches the required format and correctly displays the minimum value between Step1 and Step2."
          },
          {
            "id": 5,
            "title": "Implement tax burden ceiling calculation display",
            "description": "Update the tax burden ceiling calculation display to match the user's required format with proper formatting of all values.",
            "status": "pending",
            "dependencies": [
              1,
              3,
              4
            ],
            "details": "Add or update the tax burden ceiling calculation section in the formatPropertyTaxCalculation function. Ensure correct calculation and presentation of the ceiling amount with appropriate separators and currency symbols using the formatCurrency function. Follow the same step header formatting pattern established in subtask 3.",
            "testStrategy": "Test with various tax burden ceiling scenarios to ensure the calculation is correct and the display format matches the user's '올바른 표기 모습' requirements."
          },
          {
            "id": 6,
            "title": "Refine intermediate calculation display in Step1",
            "description": "Enhance Step1 to show the intermediate calculation values as implemented in the recent update.",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Update the Step1 display to show the full calculation process: \"= 75,250,000 × 0.1% - 30,000 × 100% = 45,250 → 45,250원\". Ensure proper formatting of all numeric values and mathematical operators. This builds upon the completed Step1 value display work.",
            "testStrategy": "Verify that Step1 shows the complete calculation process with all intermediate values correctly formatted and the final result matching the expected 45,250원."
          },
          {
            "id": 7,
            "title": "Verify and finalize all calculation display formats",
            "description": "Perform a comprehensive review of all calculation displays to ensure they match the user's required format exactly.",
            "status": "pending",
            "dependencies": [
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "details": "Review all calculation displays to ensure consistency and exact matching with the user's \"올바른 표기 모습\" format. Check for: 1) Correct step numbering and headers, 2) Proper decimal and thousands separator formatting, 3) Consistent use of the Korean currency symbol (원), 4) Correct display of calculation processes with intermediate values, 5) Proper spacing and formatting of Korean text.",
            "testStrategy": "Create a comprehensive test suite that verifies all aspects of the display format against the user's requirements. Include edge cases and various input values to ensure consistent formatting across all scenarios."
          }
        ]
      },
      {
        "id": 12,
        "title": "전세사기 감면 세액 계산 과정 표시 형식 완전 수정",
        "description": "전세사기 감면 선택 시 세액 계산 과정 표시 형식을 사용자 요구사항에 맞게 완전히 수정하여 Step1부터 Step5까지의 올바른 순서와 의미로 재구현합니다.",
        "details": "1. 세액 계산 과정 표시 형식을 사용자 요구사항에 맞게 완전히 수정:\n   - Step1: 표준세율 + 전세사기 감면 = 41,430원 (전세사기 감면을 적용한 계산)\n   - Step2: 특례세율 (감면 없음) = 45,250원 (1세대 1주택 특례세율 적용)\n   - Step3: Step1(41,430원) vs Step2(45,250원) 중 적은 값 선택 = 41,430원\n   - Step4: 세부담상한제 적용 = 42,140원\n   - Step5: Step3(41,430원) vs Step4(42,140원) 중 적은 값 선택 = 41,430원\n\n2. 계산 로직 수정:\n```typescript\nfunction displayTaxCalculationSteps(calculationData) {\n  const {\n    standardTaxAmount,\n    fraudReductionAmount,\n    specialRateAmount,\n    taxBurdenCapAmount,\n    finalTaxAmount,\n    previousYearTax,\n    taxBurdenCapRate\n  } = calculationData;\n  \n  // Step1: 표준세율 + 전세사기 감면\n  const step1 = {\n    title: 'Step1: 표준세율 + 전세사기 감면',\n    value: fraudReductionAmount,\n    formula: `${formatNumber(standardTaxAmount)} × ${(1 - fraudReductionRate).toFixed(2)} = ${formatNumber(fraudReductionAmount)}원`\n  };\n  \n  // Step2: 특례세율 (감면 없음)\n  const step2 = {\n    title: 'Step2: 특례세율 (감면 없음)',\n    value: specialRateAmount,\n    formula: `${formatNumber(specialRateAmount)}원`\n  };\n  \n  // Step3: Step1 vs Step2 중 적은 값 선택\n  const step3Value = Math.min(fraudReductionAmount, specialRateAmount);\n  const step3 = {\n    title: 'Step3: Step1 vs Step2 중 적은 값 선택',\n    value: step3Value,\n    formula: `${formatNumber(fraudReductionAmount)}원 vs ${formatNumber(specialRateAmount)}원 = ${formatNumber(step3Value)}원`\n  };\n  \n  // Step4: 세부담상한제 적용\n  const step4 = {\n    title: 'Step4: 세부담상한제 적용',\n    value: taxBurdenCapAmount,\n    formula: `${formatNumber(previousYearTax)} × ${taxBurdenCapRate.toFixed(2)} = ${formatNumber(taxBurdenCapAmount)}원`\n  };\n  \n  // Step5: Step3 vs Step4 중 적은 값 선택\n  const step5 = {\n    title: 'Step5: Step3 vs Step4 중 적은 값 선택',\n    value: finalTaxAmount,\n    formula: `${formatNumber(step3Value)}원 vs ${formatNumber(taxBurdenCapAmount)}원 = ${formatNumber(finalTaxAmount)}원`\n  };\n  \n  return {\n    steps: [step1, step2, step3, step4, step5],\n    finalTaxAmount\n  };\n}\n```\n\n3. UI 컴포넌트 수정:\n```tsx\nconst TaxCalculationDisplay = ({ calculationData }) => {\n  const { steps, finalTaxAmount } = displayTaxCalculationSteps(calculationData);\n  \n  return (\n    <div className=\"tax-calculation-display\">\n      <h3>세액 계산 과정</h3>\n      {steps.map((step, index) => (\n        <div key={index} className=\"calculation-step\">\n          <div className=\"step-title\">{step.title}</div>\n          <div className=\"step-formula\">{step.formula}</div>\n        </div>\n      ))}\n      <div className=\"final-tax\">\n        <strong>최종 세액: {formatNumber(finalTaxAmount)}원</strong>\n      </div>\n    </div>\n  );\n};\n```\n\n4. 숫자 포맷팅 함수 확인 및 수정:\n```typescript\nfunction formatNumber(value) {\n  // 소수점 이하 반올림 후 천 단위 콤마 추가\n  return Math.round(value).toLocaleString('ko-KR');\n}\n```\n\n5. 기존 Task 11에서 언급된 문제점 해결:\n   - Step1과 Step2의 값 혼동 문제 수정\n   - 계산식 표시 형식 정확히 구현\n   - 올바른 반올림 및 천 단위 구분자 적용",
        "testStrategy": "1. 단위 테스트 작성:\n```typescript\ndescribe('displayTaxCalculationSteps', () => {\n  it('should display steps in the correct order with proper values', () => {\n    const mockData = {\n      standardTaxAmount: 55000,\n      fraudReductionAmount: 41430,\n      specialRateAmount: 45250,\n      taxBurdenCapAmount: 42140,\n      finalTaxAmount: 41430,\n      previousYearTax: 38310,\n      taxBurdenCapRate: 1.1,\n      fraudReductionRate: 0.25\n    };\n    \n    const result = displayTaxCalculationSteps(mockData);\n    \n    expect(result.steps[0].title).toContain('Step1');\n    expect(result.steps[0].value).toBe(41430);\n    \n    expect(result.steps[1].title).toContain('Step2');\n    expect(result.steps[1].value).toBe(45250);\n    \n    expect(result.steps[2].title).toContain('Step3');\n    expect(result.steps[2].value).toBe(41430);\n    \n    expect(result.steps[3].title).toContain('Step4');\n    expect(result.steps[3].value).toBe(42140);\n    \n    expect(result.steps[4].title).toContain('Step5');\n    expect(result.steps[4].value).toBe(41430);\n    \n    expect(result.finalTaxAmount).toBe(41430);\n  });\n  \n  it('should handle cases where special rate is better than fraud reduction', () => {\n    const mockData = {\n      standardTaxAmount: 60000,\n      fraudReductionAmount: 48000,\n      specialRateAmount: 45000,\n      taxBurdenCapAmount: 44000,\n      finalTaxAmount: 44000,\n      previousYearTax: 40000,\n      taxBurdenCapRate: 1.1,\n      fraudReductionRate: 0.2\n    };\n    \n    const result = displayTaxCalculationSteps(mockData);\n    expect(result.steps[2].value).toBe(45000); // Step3 should choose specialRateAmount\n    expect(result.steps[4].value).toBe(44000); // Step5 should choose taxBurdenCapAmount\n  });\n});\n```\n\n2. 통합 테스트:\n   - 실제 UI에서 계산 과정이 올바르게 표시되는지 확인\n   - 다양한 시나리오에서 각 단계별 표시가 올바르게 작동하는지 검증\n     - 표준세율+감면이 유리한 경우\n     - 특례세율이 유리한 경우\n     - 세부담상한제가 적용되는 경우\n\n3. 사용자 시나리오 테스트:\n   - 사용자 요구사항에 명시된 예시 값으로 테스트 케이스 작성\n   - 각 단계별 계산 결과가 예상값과 일치하는지 확인\n   - 최종 세액이 올바르게 계산되는지 확인\n\n4. 시각적 검증:\n   - 디자인 요구사항에 맞게 UI가 구현되었는지 확인\n   - 모바일 및 데스크톱 환경에서 레이아웃이 올바르게 표시되는지 확인\n   - 접근성 검사 수행",
        "status": "pending",
        "dependencies": [
          11
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "수정된 세액 계산 단계 로직 구현",
            "description": "전세사기 감면 세액 계산 과정의 Step1부터 Step5까지의 로직을 요구사항에 맞게 수정합니다.",
            "dependencies": [],
            "details": "1. displayTaxCalculationSteps 함수를 수정하여 각 단계별 계산 로직 구현\n2. Step1: 표준세율에 전세사기 감면율을 적용한 계산 구현\n3. Step2: 특례세율 적용 계산 구현\n4. Step3: Step1과 Step2 중 적은 값 선택 로직 구현\n5. Step4: 세부담상한제 적용 로직 구현\n6. Step5: Step3와 Step4 중 적은 값 선택 로직 구현\n7. 각 단계별 계산식과 결과값 포맷팅 적용",
            "status": "pending",
            "testStrategy": "다양한 입력값(표준세율, 특례세율, 전년도 세액 등)으로 각 단계별 계산 결과가 예상대로 나오는지 테스트"
          },
          {
            "id": 2,
            "title": "숫자 포맷팅 함수 개선",
            "description": "세액 계산 과정에서 사용되는 숫자 포맷팅 함수를 개선하여 정확한 반올림과 천 단위 구분자를 적용합니다.",
            "dependencies": [
              1
            ],
            "details": "1. formatNumber 함수 개선\n2. 소수점 이하 반올림 로직 확인 및 수정\n3. 천 단위 콤마 구분자 적용 방식 검증\n4. 한국 로케일(ko-KR) 적용 확인\n5. 다양한 숫자 케이스(큰 숫자, 소수점 포함 숫자 등)에 대한 처리 검증",
            "status": "pending",
            "testStrategy": "다양한 숫자 값(정수, 소수점 포함, 큰 숫자 등)에 대해 포맷팅 결과 검증"
          },
          {
            "id": 3,
            "title": "계산 단계별 표시 형식 구현",
            "description": "각 계산 단계(Step1~Step5)의 표시 형식을 요구사항에 맞게 구현합니다.",
            "dependencies": [
              1,
              2
            ],
            "details": "1. 각 단계별 title 형식 구현 (예: 'Step1: 표준세율 + 전세사기 감면')\n2. 각 단계별 formula 형식 구현 (계산식과 결과값 표시)\n3. 계산식에 사용되는 값들의 포맷팅 적용\n4. 각 단계별 결과값 명확히 표시\n5. 비교 연산(vs)이 필요한 단계에서 올바른 비교 형식 적용",
            "status": "pending",
            "testStrategy": "각 단계별 표시 형식이 요구사항과 일치하는지 시각적으로 검증"
          },
          {
            "id": 4,
            "title": "UI 컴포넌트 수정 및 스타일링",
            "description": "세액 계산 과정을 표시하는 UI 컴포넌트를 수정하고 스타일링합니다.",
            "dependencies": [
              3
            ],
            "details": "1. TaxCalculationDisplay 컴포넌트 수정\n2. 계산 단계별 표시 레이아웃 구현\n3. 단계 제목과 계산식을 구분하여 표시\n4. 최종 세액 강조 표시\n5. 각 단계별 시각적 구분을 위한 스타일링 적용\n6. 반응형 디자인 고려하여 모바일 환경에서도 잘 보이도록 구현",
            "status": "pending",
            "testStrategy": "다양한 화면 크기에서 UI 컴포넌트가 올바르게 표시되는지 확인"
          },
          {
            "id": 5,
            "title": "통합 테스트 및 버그 수정",
            "description": "구현된 세액 계산 과정 표시 기능을 통합 테스트하고 발견된 버그를 수정합니다.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "1. 다양한 세액 계산 시나리오에 대한 통합 테스트 수행\n2. Task 11에서 언급된 문제점(Step1과 Step2의 값 혼동 등) 해결 확인\n3. 계산식 표시 형식의 정확성 검증\n4. 올바른 반올림 및 천 단위 구분자 적용 확인\n5. 발견된 버그 수정 및 재테스트\n6. 사용자 요구사항과의 일치성 최종 검증",
            "status": "pending",
            "testStrategy": "실제 사용 시나리오를 바탕으로 전체 기능 흐름 테스트 및 엣지 케이스 검증"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-27T21:39:44.646Z",
      "updated": "2025-06-27T22:52:07.578Z",
      "description": "Tasks for fraud-lease-calculation context"
    }
  }
}